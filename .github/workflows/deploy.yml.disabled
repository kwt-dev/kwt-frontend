name: Build and Deploy to Coolify

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'backend/strapi/**'
      - '.github/workflows/deploy.yml'

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository_owner }}/kwt-frontend
  BACKEND_IMAGE_NAME: ${{ github.repository_owner }}/kwt-strapi

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '^frontend/' > /dev/null; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only HEAD~1 HEAD | grep -E '^backend/strapi/' > /dev/null; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only HEAD~1 HEAD | grep -E '^\.github/workflows/deploy\.yml$' > /dev/null; then
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "backend=true" >> $GITHUB_OUTPUT
          fi

  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
      - uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
      - uses: docker/build-push-action@v5
        with:
          context: ./backend/strapi
          file: ./backend/strapi/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-coolify:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend]
    if: |
      always() &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') &&
      (needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.backend == 'true')
    steps:
      - name: Trigger Coolify deployment
        run: |
          echo "Triggering Coolify deployment webhook..."
          for attempt in 1 2 3; do
            if curl -f -X POST "${{ secrets.COOLIFY_WEBHOOK_URL }}"; then
              echo "✅ Coolify webhook triggered successfully (attempt $attempt)"
              break
            else
              echo "❌ Webhook failed (attempt $attempt/3)"
              if [ $attempt -eq 3 ]; then
                echo "🚨 All webhook attempts failed"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Updated | Image |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.detect-changes.outputs.frontend == 'true' || '⏭️' }} | \`${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.detect-changes.outputs.backend == 'true' || '⏭️' }} | \`${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-coolify]
    if: success()
    permissions:
      packages: write
    steps:
      - name: Cleanup (placeholder)
        run: |
          echo "Cleanup script goes here if needed."
